import esbuild from "esbuild";
import process from "process";
import { readFileSync } from "fs";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// Plugin to handle ?text imports
const textPlugin = {
  name: 'text',
  setup(build) {
    build.onResolve({ filter: /\?text$/ }, args => {
      const resolved = build.resolve(args.path.replace(/\?text$/, ''), {
        resolveDir: args.resolveDir,
        kind: args.kind
      });
      return resolved.then(result => ({
        path: result.path + '?text',
        namespace: 'text',
      }));
    });
    build.onLoad({ filter: /.*/, namespace: 'text' }, args => {
      const path = args.path.replace(/\?text$/, '');
      const contents = readFileSync(path, 'utf8');
      return {
        contents: `export default ${JSON.stringify(contents)}`,
        loader: 'js',
      };
    });
  },
};

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	plugins: [textPlugin],
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr"],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: false,  // Disabled for Obsidian community plugin compliance - code must be readable
	define: {
		'global': 'globalThis',
		'process.env.NODE_ENV': JSON.stringify(prod ? 'production' : 'development'),
	}
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
